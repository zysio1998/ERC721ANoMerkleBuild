{"version":3,"sources":["networks.js","App.js","reportWebVitals.js","index.js"],"names":["networks","web3","createAlchemyWeb3","require","contractAddress","App","useState","currentAccount","setCurrentAccount","loading","setloading","network","setNetwork","passedTxnHash","init","a","window","ethereum","isMetaMask","console","log","checkIfWalletIsConnected","handleChainChanged","_chainId","location","reload","request","method","accounts","length","account","switchNetwork","chainId","on","connectWallet","alert","params","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","mintONE","askContractToMintNft","mintTWO","mintTHREE","quantity","getGasPrice","provider","getFeeData","feeData","gasPrice","getNonce","signer","getTransactionCount","ethers","providers","Web3Provider","getSigner","contractInstance","Contract","myNft","abi","nonce","gasFee","populateTransaction","publicSaleMint","value","BigInt","toString","gasLimit","rawTxn","utils","formatUnits","signedTxn","sendTransaction","reciept","wait","myHash","hash","glass","blockNumber","Swal","title","html","width","padding","color","background","backdrop","fire","message","icon","text","eth","getTransaction","txn","replay_tx","to","from","data","call","pullCall","useEffect","className","onClick","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.661f361b.chunk.js","sourcesContent":["const networks = {\r\n    '0x1': 'Mainnet',\r\n    '0x3': 'Ropsten',\r\n    '0x2a': 'Kovan',\r\n    '0x4': 'Rinkeby',\r\n    '0x5': 'Goerli',\r\n    '0x61': 'BSC Testnet',\r\n    '0x38': 'BSC Mainnet',\r\n    '0x89': 'Polygon Mainnet',\r\n    '0x13881': 'Polygon Mumbai Testnet',\r\n    '0xa86a': 'AVAX Mainnet',\r\n  }\r\n  \r\n  export { networks }","import React, { useEffect, useState } from \"react\";\r\nimport './styles/App.css';\r\nimport { ethers } from \"ethers\"\r\nimport myNft from \"./ABI.json\"\r\nimport {networks} from \"./networks\"\r\nimport Swal from 'sweetalert2'\r\nimport axios from \"axios\";\r\nimport { wait } from \"@testing-library/user-event/dist/utils\";\r\n\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"https://eth-rinkeby.alchemyapi.io/v2/4V5OB61hmIw0_boKEQYbpJBg8QyR-lWf\"); \r\n\r\nconst contractAddress = \"0x3d90Fd5640b2B81860179BE5155d554d2125cB92\" \r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [selectedAddress, setSelectedAddress] = useState('')\r\n  const [loading, setloading] = useState(false);\r\n  const [network, setNetwork] = useState('')\r\n\r\n  var passedTxnHash = ''\r\n\r\n  const init = async () => {\r\n    if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {      \r\n\r\n        setloading(false)\r\n    } else {\r\n      console.log('Metamask not installed')\r\n    }\r\n  }\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account)\r\n      switchNetwork()\r\n     \r\n      // setupEventListener()\r\n    } else {\r\n      console.log(\"No authorized account found\")\r\n    }\r\n\r\n    // This is the new part, we check the user's network chain ID\r\n    const chainId = await ethereum.request({ method: 'eth_chainId' })\r\n    setNetwork(networks[chainId])\r\n\r\n    ethereum.on('chainChanged', handleChainChanged)\r\n\r\n    function handleChainChanged(_chainId) {\r\n      window.location.reload()\r\n    }\r\n  }\r\n\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      switchNetwork()\r\n      // setupEventListener()\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const switchNetwork = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        // Try to switch to the Mumbai testnet\r\n        await window.ethereum.request({\r\n          method: 'wallet_switchEthereumChain',\r\n          params: [{ chainId: '0x4' }], // Check networks.js for hexadecimal network ids\r\n        })\r\n      } catch (error) {\r\n        // This error code means that the chain we want has not been added to MetaMask\r\n        // In this case we ask the user to add it to their MetaMask\r\n        if (error.code === 4902) {\r\n          try {\r\n            await window.ethereum.request({\r\n              method: 'wallet_addEthereumChain',\r\n              params: [\r\n                {\r\n                  chainId: '0x4',\r\n                  chainName: 'Rinkeby',\r\n                  rpcUrls: [\r\n                    'https://eth-rinkeby.alchemyapi.io/v2/4V5OB61hmIw0_boKEQYbpJBg8QyR-lWf',\r\n                  ],\r\n                  nativeCurrency: {\r\n                    name: 'Ethereum',\r\n                    symbol: 'ETH',\r\n                    decimals: 18,\r\n                  },\r\n                  blockExplorerUrls: ['https://rinkeby.etherscan.io/'],\r\n                },\r\n              ],\r\n            })\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        }\r\n        console.log(error)\r\n      }\r\n    } else {\r\n      // If window.ethereum is not found then MetaMask is not installed\r\n      alert(\r\n        'MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html'\r\n      )\r\n    }\r\n  }\r\n\r\n  const mintONE = async () => {\r\n    askContractToMintNft(1);\r\n  }\r\n\r\n  const mintTWO = async () => {\r\n    askContractToMintNft(2);\r\n  }\r\n\r\n  const mintTHREE = async () => {\r\n    askContractToMintNft(3);\r\n  }\r\n\r\n  async function askContractToMintNft(quantity) {\r\n    try {\r\n        setloading(true)\r\n        let provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();             \r\n        const contractInstance = new ethers.Contract(contractAddress, myNft.abi, provider)    \r\n\r\n        async function getGasPrice() {\r\n          let feeData = await provider.getFeeData()\r\n          return feeData.gasPrice\r\n        }\r\n\r\n        async function getNonce(signer) {\r\n          return (await signer).getTransactionCount()\r\n        }\r\n\r\n        if (currentAccount !== '') {            \r\n          const nonce = await getNonce(signer)\r\n          const gasFee = await getGasPrice()          \r\n\r\n          let rawTxn = await contractInstance.populateTransaction.publicSaleMint(quantity, {\r\n            /* global BigInt */  \r\n            value: BigInt((50000000000000000 * quantity).toString()),\r\n            gasLimit: (285000 * quantity),\r\n            nonce: nonce\r\n          })\r\n          console.log(\"...Submitting transaction with gas price of:\", ethers.utils.formatUnits(gasFee, \"gwei\"), \"in gwei - & nonce:\", nonce)\r\n          let signedTxn = signer.sendTransaction(rawTxn)\r\n          let reciept = (await signedTxn).wait()  \r\n\r\n          const myHash = ((await signedTxn).hash) \r\n          const glass = () => {   //used to pass it as a global variabe for the catch to display the revert reason       \r\n            passedTxnHash = myHash  \r\n            return passedTxnHash          \r\n          }\r\n          glass()\r\n\r\n          if (reciept) {          \r\n            console.log(\"Transaction is successful!!!\" + '\\n' + \"Transaction Hash:\", (await signedTxn).hash + '\\n' + \"Block Number: \" + (await reciept).blockNumber + '\\n' + \"Navigate to https://rinkeby.etherscan.io/tx/\" + (await signedTxn).hash, \"to see your transaction\")\r\n            Swal.fire({\r\n              title: 'Minting successfull',\r\n              html:\r\n                'Hey there! we are minted successfully completed.' +\r\n                `<a href=' https://rinkeby.etherscan.io/tx/${(await signedTxn).hash}' target=\"_blank\"> rinkeby.etherscan.io/</a> ` +\r\n                '',\r\n                width: 600,\r\n                padding: '3em',\r\n                color: '#716add',\r\n                background: '#fff url(/images/trees.png)',\r\n                backdrop: `\r\n                rgba(0,0,123,0.4)\r\n                url(\"/images/nyan-cat.gif\")\r\n                left top\r\n                no-repeat\r\n                `\r\n            })             \r\n              setloading(false) \r\n          } else {\r\n            console.log(\"Error submitting transaction\")          \r\n            setloading(false)          \r\n          }           \r\n        }\r\n        else {\r\n            console.log(\"Wrong network - Connect to configured chain ID first!\")          \r\n            setloading(false)\r\n            Swal.fire(\r\n              'Connect wallet',\r\n              'Before minting you must connect your wallet',\r\n              'question'\r\n            )\r\n        }    \r\n    } catch (e) {      \r\n        console.log(\"Error Caught in Catch Statement: \", e)  \r\n        \r\n        if(e.message == \"MetaMask Tx Signature: User denied transaction signature.\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'Minting failed, you rejected the transaction, try again',         \r\n          }) \r\n          setloading(false) \r\n          return 0;\r\n        }else{\r\n\r\n        }      \r\n        \r\n        //const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\n        //const web3 = createAlchemyWeb3(\"https://eth-rinkeby.alchemyapi.io/v2/4V5OB61hmIw0_boKEQYbpJBg8QyR-lWf\"); \r\n        const txn = await web3.eth.getTransaction(passedTxnHash)\r\n        console.log(\"transaction hash: \", passedTxnHash)\r\n        console.log(\"trying to do getTransaction\", txn)\r\n          \r\n        let replay_tx = {\r\n          to: txn['to'],\r\n          from: txn['from'],\r\n          value: txn['value'],\r\n          data: txn['input'],\r\n        }      \r\n          \r\n        try{\r\n          const pullCall = await web3.eth.call(replay_tx, txn.blockNumber)\r\n          console.log(\"Working ok\", pullCall)\r\n        }catch (error){\r\n          console.log(\"error is from long stuff here:\" ,error)   \r\n          if(error == \"Error: Returned error: execution reverted: Public mint has not begun yet\"){\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Minting Failed',\r\n              text: 'Public mint has not started yet',\r\n            \r\n            })          \r\n          }else if(error == \"Error: Returned error: execution reverted: Exceeds max per transaction\"){\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Minting Failed',\r\n              text: 'Can not mint more than 3 at a time',\r\n            \r\n            })\r\n          }else if(error == \"Error: Returned error: execution reverted: Incorrect funds\"){\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Minting Failed',\r\n              text: 'Incorrect amount of ETH',\r\n            \r\n            })\r\n          }else if(error == \"Error: Returned error: execution reverted: Exceeds max per address\"){\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Minting Failed',\r\n              text: 'Can not mint more then 3 on the public mint',\r\n            \r\n            })\r\n          }else if(error == \"Error: Returned error: execution reverted: Must mint more than 0 tokens at a time\"){\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Minting Failed',\r\n              text: 'You must mint more than 1 NFT',\r\n            \r\n            })\r\n          }else if(error == \"Error: Returned error: execution reverted: No more NFTs left\"){\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Minting Failed',\r\n              text: 'All the NFTs are gone',\r\n            \r\n            })\r\n          }else{\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Minting Failed',\r\n              text: 'Please try again',\r\n            \r\n            })   \r\n          }       \r\n        }\r\n      \r\n        \r\n        setloading(false)    \r\n    }\r\n  }  \r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    if(currentAccount != ''){\r\n      setloading(true)\r\n    }\r\n\r\n    if (currentAccount !== '' && network === 'Rinkeby') {      \r\n      init()\r\n    }\r\n  }, [network])\r\n\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        loading ?\r\n          <div className=\"loading\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n          :\r\n          \"\"}\r\n      <div className={loading ? \"container disabledbutton\" : \"container\"}>\r\n        <div className=\"nav header-container\">\r\n          <div className=\"connect\">\r\n            {currentAccount === \"\" ? (\r\n              renderNotConnectedContainer()\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <h1 class=\"arek\">ERC721A with User Feedback For Errors - no merkle </h1>            \r\n          <p class=\"arek\">Error checking with feedback and only allowed to mint the when public is active and you have a max per wallet allowed</p>    \r\n          <div className=\"row body\">\r\n            <div className=\"col-md-6 tesboddy ff\">  \r\n              <div className=\" mint_div \">                \r\n                <button onClick={mintONE} className=\"cta-button connect-wallet-button\">                \r\n                  Mint NFT public 1 nft\r\n                </button>\r\n                <button onClick={mintTWO} className=\"cta-button connect-wallet-button\">                \r\n                  Mint NFT public 2 nft\r\n                </button> \r\n                <button onClick={mintTHREE} className=\"cta-button connect-wallet-button\">                \r\n                  Mint NFT public 3 nft\r\n                </button>                \r\n                </div>\r\n            </div>            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}